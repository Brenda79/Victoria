{
#with open("SEIDconfig.hjson","r") as f:rawcfg = hjson.loads(f.read())
complexity: basic
className: SEID
moduleName: autoseid
#version control
baseModelVersion: "1.2.3"
ModelMatrix:{
        #defining forward map
        prnDefault:True
        names: "S E I D"
        BaseVar: S
        # "S" : {"E":{"prob":str,"prob_symb":str},"D":{"prob":str,"prob_symb":str}}
        Exits:{
          "S" : {"E":{}}
          "E" : {"I":{}}
          "I" : {"D":{}}
          "D" : {}
        }
        # ExitFractions:{f:5.0/100.0, g:0.03, h:0.4, i:0.5}
        #ExitFractions:{}
        # NoExit: D
    }
num_pars : 2 # Number of parameters to be inferred: S(0) and contact rate
ModelCall:{
   Region:"Eyam, England, Bubonic plague outbreak 1,666"
   instanceName: seidinstance
   # population size
    N:261
    burnin:1000
    # Data file name, should be in workdir/data/data_fnam
    # Make sure to process data into a vertical text array
    data_fnam:"Eyam.csv"
    "out_fnam":"Eyam" # MCMC output file name, without .txt, workdir/output/out_fnam + '.txt'
    "init_index":0 # day number from data start, where to start the plot
    "init_date":"date( 1666, 6, 1)"# date of init_index
    "trim":-30,# how many data points to trim
    pred: -trim+7*3
    "workdir":"./../"
    T:2000
    plot_fit:False
    # Residence rates 1/day, names and Erlang series
    "R_rates":{
            'E':{
                    residenceRate:1/5
                    name:\sigma_1
                    erlang:4
                }
              'I':{
                    residenceRate:1/4
                    name:\sigma_2
                    erlang:3
                }
            }
}

odeint: "integrate.odeint( rhs, X0, t_quad, args)"

solvingMethods:{
    rhs:{
        defn:'rhs( self, x, t, p)'
        body:
        '''
        beta = p[1] #I(0) is p[0]
        I = np.sum(x * self.mask_I) # total number of infectious
        #force of infection beta1*I^A/N + some factor of  beta1*I^S/N
        foi = I/self.N * beta
        self.par[self.T.ConvertVar('S')] = foi
        return self.T.M @ (x * (self.T.par_mask @ self.par))
        '''
        }
    solve_plain:{
        defn:'solve_plain(self, p, quad=True)'
        body:
        '''
        """
        Solve the initial value problem
        """
        #S(0) = p[0] #
        #beta = p[1] # force of infection

        self.X0 *= 0
        self.X0 += p[0]*self.mask_I #Initial infected
        self.X0 += (self.N-p[0])*self.mask_S #suceptible
        if quad:
            return odeint(self.rhs, self.X0, self.t_quad, args=(p,))
        else:
            return odeint(self.rhs, self.X0, self.time, args=(p,))
        '''
        }
    solve:{
        defn:'solve( self, p)'
        body:
        '''
        """
        Solve the initial value problem:
        Integral of incidence between observation times
        """
        # Use the solver:

        self.soln = self.solve_plain( p, quad=False )

        return [np.diff(self.soln[::self.quad_k,:] @ self.mask_D)] #list of size self.p=1
        '''
        }
    llikelihood:{
        defn:'llikelihood( self, p)'
        body:
        '''
        #if support(p): # Not necessary, the twalk checks it already before acllin energy support(p):
        # negative binomial likelihood
        mu_D = self.solve(p)[0]
        mu_D +=3
        # negative binomial likelihood for deaths
        omega = 2.0
        theta = 0.5   #antonio 0.5
        r = mu_D/(omega-1.0+theta*mu_D)
        q = 1.0/(omega+theta*mu_D)
        log_likelihood = np.sum(ss.nbinom.logpmf( self.data+3,r,q))

        return log_likelihood
        '''
        }
    lprior:{
        defn:'lprior( self, p)'
        body:
        '''
        # Log priors:
        log_prior = 0.0
        # gamma prior distribution parameters for I(0)
        log_prior += ss.gamma.logpdf(p[0],1.0,scale=10.0)
        # log-normal prior distribution parameters for beta
        log_prior += np.sum(ss.lognorm.logpdf(p[1], 1.0, scale=1.0)) #scale=np.exp(0.0)
        return log_prior
        '''
        }
    support:{
        defn:'support( self, p)'
        body:
        '''
        rt = True
        rt &= (0.0 < p[0] < 10.0**2)
        # beta in [0,20]
        rt &= all((0.0 < p[1]) * (p[3:] < 20.0))

        return rt
        '''
        }
    sim_init:{
        defn:'sim_init(self)'
        body:
        '''
        """Simulate initial values for mcmc."""
        p = np.zeros(self.num_pars)
        p[0] = np.random.uniform(low = 0.01, high = 10.0)
        p[1] = np.random.uniform(low = 0.01, high = 5.0)

        return p
        '''
        }
    }
    plottingMethods:{
    PlotEvolution:{
        defn:
        '''
        PlotEvolution( self, pred, cumm=False, log=False, ax=None,\
                       csv_fnam=None, q=[ 10, 25, 50, 75, 90], blue=True, add_MRE=False,\
                       color='red', color_q='black', label='Mediana', right_axis=True, label_cases=True)
        '''
        body:
        '''
        """ pred: number of days to predict
            ty: 0 = Infected,1 = deaths
            cumm: True if cumulative, default False
            log: True if y log scale, default False
            ax: axis where to print the plot (optional)
            csv_fnam: name of file to save the data for the plot (optional)
        """
        if ax == None:
            fig = plt.figure(figsize=(12,10))
            ax = fig.gca()
        else:
            fig = None

        data = self.data # Deaths REPORTED
        data_trimed = self.data_trimed
        title = 'Decesos'

        # cumulative or prevalanece, prepapr solns
        if cumm:
            prevalence = np.cumsum(data) # aggregate observed data
            self.future = prevalence[-1] + np.cumsum(data_trimed)
            solns = self.solns[0]
            ylabel = 'Amount of accumulated cases'
            title = 'Acumulados de ' + title
        else:
            prevalence = data # aggregate observed data
            self.future = data_trimed
            solns = np.diff( np.append( np.zeros((self.solns[0].shape[0],1)), self.solns[0], axis=1), axis=1)
            ylabel = 'Number of cases'
            title = 'incidencia de ' + title

        self.PlotEvolution_fm( solns=solns, prevalence=prevalence, pred=pred, ylabel=ylabel, log=log, ax=ax,\
                       csv_fnam=csv_fnam, q=q, blue=blue, add_MRE=add_MRE,\
                       color=color, color_q=color_q, label=label, right_axis=right_axis, label_cases=label_cases)

        ax.set_title(self.Region + '. ' + title)
        '''
        }
    }
}